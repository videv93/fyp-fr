// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./basetest.sol";

interface IVulnerableContract {
    function setPassword(string memory _newPassword) external;
    function getPassword() external view returns (string memory);
}

contract VulnerableContract is IVulnerableContract {
    string public password;
    address public owner;

    constructor(string memory _initialPassword) {
        password = _initialPassword;
        owner = msg.sender;
    }

    // Vulnerable function - missing access control
    function setPassword(string memory _newPassword) public {
        password = _newPassword;
    }

    function getPassword() public view returns (string memory) {
        return password;
    }
}

contract FixedContract is IVulnerableContract {
    string public password;
    address public owner;

    constructor(string memory _initialPassword) {
        password = _initialPassword;
        owner = msg.sender;
    }

    // Fixed function with access control
    function setPassword(string memory _newPassword) public {
        require(msg.sender == owner, "Only owner can set password");
        password = _newPassword;
    }

    function getPassword() public view returns (string memory) {
        return password;
    }
}

contract PasswordAccessControlTest is BaseTestWithBalanceLog {
    IVulnerableContract vulnerable;
    IVulnerableContract fixedContract;
    address owner = address(0x1);
    address attacker = address(0x2);

    function setUp() public {
        vm.deal(owner, 100 ether);
        vm.deal(attacker, 100 ether);
        
        // Deploy contracts
        vm.prank(owner);
        vulnerable = new VulnerableContract("initial123");
        
        vm.prank(owner);
        fixedContract = new FixedContract("initial123");
    }

    function testExploit() public balanceLog {
        // Initial state check
        assertEq(vulnerable.getPassword(), "initial123");
        
        // 1. Demonstrate normal owner behavior
        vm.startPrank(owner);
        vulnerable.setPassword("owner_new_pass");
        assertEq(vulnerable.getPassword(), "owner_new_pass");
        vm.stopPrank();

        // 2. Attacker changes password without authorization
        vm.prank(attacker);
        vulnerable.setPassword("hacked_pass");
        assertEq(vulnerable.getPassword(), "hacked_pass");

        // 3. Show fixed version prevents attack
        vm.prank(owner);
        fixedContract.setPassword("owner_new_pass");
        assertEq(fixedContract.getPassword(), "owner_new_pass");

        vm.prank(attacker);
        (bool success,) = address(fixedContract).call(
            abi.encodeWithSignature("setPassword(string)", "hacked_pass")
        );
        assertFalse(success, "Attack should fail on fixed contract");
        assertEq(fixedContract.getPassword(), "owner_new_pass");
    }
}