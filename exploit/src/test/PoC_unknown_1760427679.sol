// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./basetest.sol";

interface IFaucet {
    function claimTokens() external;
    function dailyClaimCount(address) external view returns (uint256);
    function DAILY_LIMIT() external view returns (uint256);
}

contract VulnerableFaucet is IFaucet {
    mapping(address => uint256) public override dailyClaimCount;
    uint256 public constant override DAILY_LIMIT = 1 ether;
    
    function claimTokens() external override {
        require(dailyClaimCount[msg.sender] < DAILY_LIMIT, "Daily limit reached");
        
        // Reset count if a new day has passed
        if (block.timestamp > dailyClaimCount[msg.sender] + 1 days) {
            dailyClaimCount[msg.sender] = 0;
        }
        
        dailyClaimCount[msg.sender] += 1 ether;
        payable(msg.sender).transfer(1 ether);
    }
}

contract TimestampManipulationTest is BaseTestWithBalanceLog {
    IFaucet public faucet;
    address public user = address(0x1);
    address public attacker = address(0x2);
    
    function setUp() public {
        vm.deal(address(this), 100 ether);
        faucet = IFaucet(address(new VulnerableFaucet()));
        vm.deal(address(faucet), 10 ether);
    }
    
    function testExploit() public balanceLog {
        vm.deal(user, 0);
        vm.deal(attacker, 0);
        
        // Regular user claims until limit reached
        vm.startPrank(user);
        faucet.claimTokens();
        assertEq(faucet.dailyClaimCount(user), 1 ether);
        
        // Attempt to claim again - should fail
        vm.expectRevert("Daily limit reached");
        faucet.claimTokens();
        vm.stopPrank();
        
        // Attacker manipulates timestamp to bypass limit
        vm.startPrank(attacker);
        faucet.claimTokens();
        assertEq(faucet.dailyClaimCount(attacker), 1 ether);
        
        // Warp time forward by 1 day + 1 second to reset counter
        vm.warp(block.timestamp + 1 days + 1 seconds);
        
        // Attacker claims again successfully
        faucet.claimTokens();
        assertEq(faucet.dailyClaimCount(attacker), 1 ether);
        vm.stopPrank();
    }
}