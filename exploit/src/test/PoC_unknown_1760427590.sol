// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./basetest.sol";

interface IVulnerableContract {
    function claimFaucetTokens(address recipient) external;
    function lastClaimTime(address user) external view returns (uint256);
}

contract VulnerableContract is IVulnerableContract {
    mapping(address => uint256) public lastClaimTime;

    function claimFaucetTokens(address recipient) external {
        lastClaimTime[recipient] = block.timestamp;
        payable(recipient).transfer(1 ether);
    }
}

contract MockContract {
    fallback() external payable {
        revert("Mock contract rejects payments");
    }
}

contract VulnerabilityTest is BaseTestWithBalanceLog {
    IVulnerableContract public vulnerableContract;
    MockContract public mock;

    function setUp() public {
        vm.deal(address(this), 100 ether);
        vulnerableContract = new VulnerableContract();
        vm.deal(address(vulnerableContract), 10 ether);
        mock = new MockContract();
    }

    function testExploit() public balanceLog {
        uint256 initialBalance = address(mock).balance;
        uint256 initialTime = vulnerableContract.lastClaimTime(address(mock));
        
        (bool success,) = address(vulnerableContract).call(
            abi.encodeWithSignature("claimFaucetTokens(address)", address(mock))
        );
        
        uint256 finalBalance = address(mock).balance;
        uint256 finalTime = vulnerableContract.lastClaimTime(address(mock));
        
        assertFalse(success, "Call should fail");
        assertEq(finalBalance, initialBalance, "Balance should not change");
        assertEq(finalTime, initialTime, "State should not change");
    }

    function testFixedBehavior() public balanceLog {
        uint256 initialTime = vulnerableContract.lastClaimTime(address(mock));
        (bool success, ) = address(vulnerableContract).call(
            abi.encodeWithSignature("claimFaucetTokens(address)", address(mock))
        );
        
        assertFalse(success, "Call should fail");
        assertEq(
            vulnerableContract.lastClaimTime(address(mock)),
            initialTime,
            "State should not change on failed transfer"
        );
    }
}