// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./basetest.sol";

contract PasswordManager {
    event SetNewPassword();

    string private password;

    function setPassword(string memory _newPassword) public {
        password = _newPassword;
        emit SetNewPassword();
    }

    function getPassword() public view returns (string memory) {
        return password;
    }
}

contract PasswordManagerSecure {
    event SetNewPassword(string indexed newPassword, address indexed caller);

    string private password;

    function setPassword(string memory _newPassword) public {
        password = _newPassword;
        emit SetNewPassword(_newPassword, msg.sender);
    }

    function getPassword() public view returns (string memory) {
        return password;
    }
}

contract TestPasswordEventVulnerability is BaseTestWithBalanceLog {
    PasswordManager vulnerable;
    PasswordManagerSecure secure;
    address alice;
    address bob;

    function setUp() public {
        vulnerable = new PasswordManager();
        secure = new PasswordManagerSecure();
        alice = makeAddr("alice");
        bob = makeAddr("bob");
        vm.deal(alice, 1 ether);
        vm.deal(bob, 1 ether);
    }

    function testExploit() public balanceLog {
        vm.prank(alice);
        vulnerable.setPassword("AlicePassword123");

        vm.prank(bob);
        vulnerable.setPassword("BobPassword456");

        assertEq(vulnerable.getPassword(), "BobPassword456");

        vm.prank(alice);
        secure.setPassword("AliceSecure123");

        vm.prank(bob);
        secure.setPassword("BobSecure456"); 
    }
}